apply plugin: 'idea'
apply plugin: 'java' // Needed for default values in the custom Test task(s)

idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}
subprojects {
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply from: "$project.rootDir/optional-dependencies.gradle"

    sourceCompatibility = 1.6

    repositories {
        mavenCentral()
    }
    dependencies {
        compile(
        )
        testCompile(
            'org.codehaus.groovy:groovy-all:2.1.1',
        )
    }
}

// These are the dependencies that are required to build the project and run the module tests but are never meant
// to be transitive dependencies of any module here because they should instead already be available on the class path
// wherever someone is using a server builder.
def optionalThirdPartyLibs = [
    // Jersey server support
    'com.sun.jersey:jersey-server:1.17',
    'com.sun.jersey:jersey-servlet:1.17',
    'com.sun.jersey:jersey-core:1.17',
    'javax.ws.rs:jsr311-api:1.1.1',
    'com.sun.jersey.contribs:jersey-spring:1.17',
    // Spring MVC support
    'org.springframework:spring-web:3.2.1.RELEASE',
    'org.springframework:spring-webmvc:3.2.1.RELEASE',
    // For getting a client WebResource from a builder
    'com.sun.jersey:jersey-client:1.17',
]

project('server-builder-api') {
    dependencies {
        optional(
            optionalThirdPartyLibs
        )
    }
}

project('server-builder-core') {
    dependencies {
        compile(
            project(':server-builder-api'),
        )
        optional(
            'org.eclipse.jetty:jetty-servlet:8.1.9.v20130131',
            project(':server-builder-jetty7'),
            project(':server-builder-jetty8'),
        )
    }
}

project('server-builder-test-support') {
    dependencies {
        compile(
            project(':server-builder-api'),
            project(':server-builder-core'),
            'org.codehaus.groovy:groovy-all:2.1.1',
            'junit:junit:4.11',
            'com.sun.jersey:jersey-client:1.17', // Just a convenient HTTP client to test with
        )
        optional(
            optionalThirdPartyLibs
        )
    }
}

project('server-builder-module-test') {
    dependencies {
        testCompile(
            // Build against the api and the module containing the actual tests
            project(':server-builder-api'),
            project(':server-builder-test-support'),
            optionalThirdPartyLibs
        )
    }
}

project('server-builder-jetty8') {
    dependencies {
        compile(
            project(':server-builder-api'),
            'org.eclipse.jetty:jetty-servlet:8.1.9.v20130131',
        )
        optional(
            optionalThirdPartyLibs
        )
        testCompile(
            project(':server-builder-test-support'),
        )
    }
}

project('server-builder-jetty7') {
    dependencies {
        compile(
            project(':server-builder-api'),
            'org.eclipse.jetty:jetty-server:7.6.10.v20130312',
            'org.eclipse.jetty:jetty-servlet:7.6.10.v20130312',
        )
        optional(
            optionalThirdPartyLibs
        )
        testCompile(
            project(':server-builder-test-support'),
        )
    }
}

task('testtest', type: Test) {
    testClassesDir = project(':server-builder-module-test').sourceSets.test.output.classesDir
    classpath =
        project(':server-builder-module-test').sourceSets.test.output +
        project(':server-builder-module-test').configurations.testCompile +
        project(':server-builder-jetty7').configurations.compile
}